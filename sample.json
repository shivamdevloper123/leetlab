


{
  "title": "Longest Increasing Subsequence",
  "description": "Given an integer array `nums`, return the length of the longest strictly increasing subsequence.\n\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of `[0,3,1,6,2,2,7]`.",
  "difficulty": "MEDIUM",
  "tags": ["dynamic programming", "binary search"],
  "examples": [
    {
      "input": "[10,9,2,5,3,7,101,18]",
      "output": "4",
      "explanation": "The LIS is [2,3,7,101]."
    },
    {
      "input": "[0,1,0,3,2,3]",
      "output": "4",
      "explanation": "The LIS is [0,1,2,3]."
    },
    {
      "input": "[7,7,7,7,7,7,7]",
      "output": "1",
      "explanation": "The LIS is [7]."
    }
  ],
  "constraints": "1 <= nums.length <= 2500\n-10^4 <= nums[i] <= 10^4",
  "hints": "Use binary search on a `tails` array where each `tails[i]` is the smallest tail of all increasing subsequences of length i+1.",
  "testcases": [
    { "input": "[10,9,2,5,3,7,101,18]", "output": "4" },
    { "input": "[0,1,0,3,2,3]", "output": "4" },
    { "input": "[7,7,7,7,7,7,7]", "output": "1" },
    { "input": "[1,2,3,4,5]", "output": "5" },
    { "input": "[5,4,3,2,1]", "output": "1" }
  ],
  "codeSnippets": {
    "JAVASCRIPT": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    // your code here\n};\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n\nrl.on('line', (line) => {\n    const nums = JSON.parse(line);\n    console.log(lengthOfLIS(nums));\n    process.exit();\n});",
    "PYTHON": "def lengthOfLIS(nums):\n    # your code here\n    pass\n\nimport sys, json\nnums = json.loads(sys.stdin.readline())\nprint(lengthOfLIS(nums))",
    "JAVA": "import java.util.*;\n\npublic class Main {\n    public static int lengthOfLIS(int[] nums) {\n        // your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine();\n        line = line.replaceAll(\"[\\[\\]]\", \"\");\n        String[] parts = line.split(\",\");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i].trim());\n        }\n        System.out.println(lengthOfLIS(nums));\n    }\n}",
    "CPP": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint lengthOfLIS(vector<int>& nums) {\n    // your code here\n    return 0;\n}\n\nint main() {\n    string line;\n    getline(cin, line);\n    line = line.substr(1, line.length() - 2); // remove brackets\n    stringstream ss(line);\n    string segment;\n    vector<int> nums;\n    while (getline(ss, segment, ',')) {\n        nums.push_back(stoi(segment));\n    }\n    cout << lengthOfLIS(nums) << endl;\n    return 0;\n}"
  },
  "referenceSolutions": {
    "JAVASCRIPT": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar lengthOfLIS = function(nums) {\n    if (nums.length === 0) return 0;\n    let tails = [];\n    for (let num of nums) {\n        let i = 0, j = tails.length;\n        while (i < j) {\n            let m = Math.floor((i + j) / 2);\n            if (tails[m] < num) i = m + 1;\n            else j = m;\n        }\n        if (i < tails.length) tails[i] = num;\n        else tails.push(num);\n    }\n    return tails.length;\n};\n\nconst readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n\nrl.on('line', (line) => {\n    const nums = JSON.parse(line);\n    console.log(lengthOfLIS(nums));\n    process.exit();\n});",
    "PYTHON": "import bisect\n\ndef lengthOfLIS(nums):\n    tails = []\n    for num in nums:\n        idx = bisect.bisect_left(tails, num)\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    return len(tails)\n\nimport sys, json\nnums = json.loads(sys.stdin.readline())\nprint(lengthOfLIS(nums))",
    "JAVA": "import java.util.*;\n\npublic class Main {\n    public static int lengthOfLIS(int[] nums) {\n        List<Integer> tails = new ArrayList<>();\n        for (int num : nums) {\n            int i = Collections.binarySearch(tails, num);\n            if (i < 0) i = -(i + 1);\n            if (i == tails.size()) tails.add(num);\n            else tails.set(i, num);\n        }\n        return tails.size();\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String line = sc.nextLine();\n        line = line.replaceAll(\"[\\[\\]]\", \"\");\n        String[] parts = line.split(\",\");\n        int[] nums = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            nums[i] = Integer.parseInt(parts[i].trim());\n        }\n        System.out.println(lengthOfLIS(nums));\n    }\n}",
    "CPP": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint lengthOfLIS(vector<int>& nums) {\n    vector<int> tails;\n    for (int num : nums) {\n        auto it = lower_bound(tails.begin(), tails.end(), num);\n        if (it == tails.end()) {\n            tails.push_back(num);\n        } else {\n            *it = num;\n        }\n    }\n    return tails.size();\n}\n\nint main() {\n    string line;\n    getline(cin, line);\n    line = line.substr(1, line.length() - 2); // remove brackets\n    stringstream ss(line);\n    string segment;\n    vector<int> nums;\n    while (getline(ss, segment, ',')) {\n        nums.push_back(stoi(segment));\n    }\n    cout << lengthOfLIS(nums) << endl;\n    return 0;\n}"
  }
}